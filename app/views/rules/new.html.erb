<head>
  <link rel="stylesheet" href="https://leaflet.github.io/Leaflet.draw/docs/examples/libs/leaflet.css">
  <link rel="stylesheet" href="https://leaflet.github.io/Leaflet.draw/src/leaflet.draw.css">

  <script src="https://leaflet.github.io/Leaflet.draw/docs/examples/libs/leaflet-src.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/Leaflet.draw.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/Leaflet.Draw.Event.js"></script>

  <script src="https://leaflet.github.io/Leaflet.draw/src/Toolbar.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/Tooltip.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/ext/GeometryUtil.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/ext/LatLngUtil.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/ext/LineUtil.Intersect.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/ext/Polygon.Intersect.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/ext/Polyline.Intersect.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/ext/TouchEvents.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/draw/DrawToolbar.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/draw/handler/Draw.Feature.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/draw/handler/Draw.SimpleShape.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/draw/handler/Draw.Polyline.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/draw/handler/Draw.Marker.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/draw/handler/Draw.Circle.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/draw/handler/Draw.CircleMarker.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/draw/handler/Draw.Polygon.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/draw/handler/Draw.Rectangle.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/edit/EditToolbar.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/edit/handler/EditToolbar.Edit.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/edit/handler/EditToolbar.Delete.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/Control.Draw.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/edit/handler/Edit.Poly.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/edit/handler/Edit.SimpleShape.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/edit/handler/Edit.Rectangle.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/edit/handler/Edit.Marker.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/edit/handler/Edit.CircleMarker.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/edit/handler/Edit.Circle.js"></script>
</head>

<div class="container">
  <h2 class="mb-0">Cadastrar uma nova norma</h2>
</div>
<div class="container d-flex">
  <div class="form-container col-sm-5 mb-5">

    <h3>Dados Gerais</h3>

    <%= simple_form_for(@rule) do |f| %>
      <%= f.error_notification %>
      <%= f.error_notification message: f.object.errors[:base].to_sentence if f.object.errors[:base].present? %>

      <div class="form-inputs">
        <%= f.input :jurisdiction, label: "Jurisdição", collection: ['Federal', 'Estadual', 'Municipal'] %>
        <%= f.input :issuer, label: "Emissor" %>
        <div class="d-flex">
          <div class="mr-4">
            <%= f.input :category, label: "Tipo de Norma", collection: ['Decreto', 'Decreto Legislativo', 'Emenda Constitucional', 'Instrução Normativa', 'Instrução Operacional', 'Lei', 'Lei Complementar', 'Medida Provisória', 'Portaria', 'Resolução'] %>
          </div>
          <div>
            <%= f.input :number, label: "Número" %>
          </div>
        </div>
        <div class="d-flex">
          <%= f.input :ed_date, label: "Data de Edição", as: :date, html5: true %>
          <%= f.input :pub_date, label: "Data de Publicação", as: :date, html5: true %>
        </div>
        <%= f.input :long_title, label: "Ementa" %>
        <%= f.input :source, label: "Fonte" %>
        <%= f.input :hyperlink, label: "Link da Norma", type: "url" %>
        <%= f.association :industries, label: "Setor", input_html: { multiple: true }, collection: Industry.order('name ASC'), include_hidden: false %>
      </div>

      <div class="form-actions mb-2">
        <%= f.button :submit, value: "Criar nova norma", class: "btn-ghost" %>
        <%= f.button :button, "Cancelar", type: "reset", class: "btn-cancel" %>
      </div>

    <%= link_to 'Voltar', root_path, class: "btn-ghost" %>

  </div>

  <div class="form-container col-sm-8 mb-5">
    <div>
      <h3>Associar Polígono</h3>
    </div>
    <div class="d-flex mb-3">
      <div>
        <label for="geom-input-option">Escolha uma forma de apresentar a área</label>
        <select id="geom-input-option" name="geom-input-option" required>
          <option default></option>
          <option value="load">Selecionar polígono cadastrado</option>
          <option value="upload">Carregar arquivo shapefile compactado</option>
        </select>

        <div id='form-4th-row' class="mb-3">
          <input type="file">
        </div>

        <div id='form-5th-row'>
          <%= f.association :polygons, label: "Polígonos cadastrados", collection: Polygon.order('name ASC'), input_html: { multiple: true }, include_hidden: false %>
        </div>
        <% end %>
      </div>
    </div>

    <div>
      <input type="hidden" name="geography" id='wkt-hidden-input'>
    </div>

    <div id="map" class= "col-sm-12" style="width: 100vw; height: 100vh; margin: 0 auto;">
    </div>

  </div>

</div>


<script type="text/javascript">
  window.addEventListener("load", (event) => {
    document.getElementById('form-4th-row').hidden = true;
    document.getElementById('form-5th-row').hidden = true;
  });
  const formGeoInputOptionTwo = document.getElementById('geom-input-option');
  formGeoInputOptionTwo.addEventListener('input', (event) => {
    console.log("Geometry input option is set");
    const form4thRow = document.getElementById('form-4th-row');
    const form5thRow = document.getElementById('form-5th-row');
    if (formGeoInputOptionTwo.value == "load") {
      form4thRow.hidden = true;
      form5thRow.hidden = false;
    } else if (formGeoInputOptionTwo.value == "upload") {
      form4thRow.hidden = false;
      form5thRow.hidden = true;
      drawControl.remove(map);
    } else {
      form4thRow.hidden = true;
      form5thRow.hidden = true;
      drawControl.remove(map);
    };
  });
</script>


<script>
  const mapElement = document.getElementById('map');

  if (mapElement) {
    const map = L.map(mapElement).setView([-15.5, -48], 5);

    L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibGVvZXhjZWxzdXMiLCJhIjoiY2tleWNxcnB2MGFzejJwcXQwdGIwMmR2byJ9.CbC1R_EI0AICNAxaZSvyeg', {
      attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
      maxZoom: 18,
      id: 'mapbox/streets-v11',
      tileSize: 512,
      zoomOffset: -1,
      accessToken: 'pk.eyJ1IjoibGVvZXhjZWxzdXMiLCJhIjoiY2tleWNxcnB2MGFzejJwcXQwdGIwMmR2byJ9.CbC1R_EI0AICNAxaZSvyeg'
    }).addTo(map);

  const selectPolygon = document.getElementById('rule_polygon_ids');
  selectPolygon.addEventListener('change', (event) => {
    console.log('Value changed');
    // Apagar/remover layers do leaflet;
    const drawnItems = new L.FeatureGroup();
    // const multipleSelection = [];
    // const multipleSelection.push(selectPolygon.value);
    // Fetch para buscar os polígonos pelos seus IDs;
    fetch(`/polygons/${selectPolygon.value}`)
      .then(response => response.json())
      .then((data) => {
        console.log(data.coordinates);
        // data é um JSON com uma chave coordinates;
        // dentro dessa chave coordinates, temos um array de arrays com as coordenadas;
        // precisamos enviar esses dados para o mapa e atualizá-lo;
        L.polygon(data.coordinates,
          {
            color: '#000',
            weight: 1,
            fillColor: '#6E8B3D',
            fillOpacity: 0.5,
          }).addTo(map);
      });
    // Recebe um hash ou um array de coordenadas (armazenadas em uma enumerable);
    // // Iterar sobre esse resultado para criar camadas do leaflet para visualização no mapa;
    // data.forEach((result) => {
    // função/módulo do leaflet => L.Polygon(array de pares de coordenadas).addTo(nome da variável que contém o mapa);
  });
}
</script>

