<head>
  <link rel="stylesheet" href="https://leaflet.github.io/Leaflet.draw/docs/examples/libs/leaflet.css">
  <link rel="stylesheet" href="https://leaflet.github.io/Leaflet.draw/src/leaflet.draw.css">

  <script src="https://leaflet.github.io/Leaflet.draw/docs/examples/libs/leaflet-src.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/Leaflet.draw.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/Leaflet.Draw.Event.js"></script>

  <script src="https://leaflet.github.io/Leaflet.draw/src/Toolbar.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/Tooltip.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/ext/GeometryUtil.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/ext/LatLngUtil.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/ext/LineUtil.Intersect.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/ext/Polygon.Intersect.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/ext/Polyline.Intersect.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/ext/TouchEvents.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/draw/DrawToolbar.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/draw/handler/Draw.Feature.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/draw/handler/Draw.SimpleShape.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/draw/handler/Draw.Polyline.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/draw/handler/Draw.Marker.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/draw/handler/Draw.Circle.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/draw/handler/Draw.CircleMarker.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/draw/handler/Draw.Polygon.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/draw/handler/Draw.Rectangle.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/edit/EditToolbar.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/edit/handler/EditToolbar.Edit.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/edit/handler/EditToolbar.Delete.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/Control.Draw.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/edit/handler/Edit.Poly.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/edit/handler/Edit.SimpleShape.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/edit/handler/Edit.Rectangle.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/edit/handler/Edit.Marker.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/edit/handler/Edit.CircleMarker.js"></script>
  <script src="https://leaflet.github.io/Leaflet.draw/src/edit/handler/Edit.Circle.js"></script>

</head>

<div class="container d-flex">
  <div id="map" class="col-sm-9 mr-3" style="width: 100vw; height: 100vh; margin: 0 auto;">
  </div>

  <div class="form-div-over col-sm-3 mr-2" id="search-form" style="float: right; position: absolute, margin: 20px;">
    <form action="index_search" method="get">

      <div>
        <label for="industry">Escolha um setor:</label>
        <select id="industries" class="mb-2" name="industry" required>
          <option default></option>
          <option value="rodovia">Rodovia</option>
          <option value="ferrovia">Ferrovia</option>
          <option value="mineração">Mineração</option>
          <option value="linha de transmissão">Linha de Transmissão</option>
          <option value="geração hidrelétrica">Geração Hidrelétrica</option>
        </select>
      </div>

      <div>
        <label for="geom-input-option">Escolha uma forma de apresentar a área</label>
        <select id="geom-input-option" class="mb-2" name="geom-input-option" required>
          <option default></option>
          <option value="upload">Carregar arquivo shapefile compactado</option>
          <option value="draw">Desenhar sobre o mapa</option>
        </select>
      </div>

      <div id='form-3th-row'>
        <label for="shape-option">Tipo de geometria para o desenho</label>
        <select placeholrder="Escolha" id="shape-option" name="shape-option">
          <option default></option>
          <option value="polygon">Polígono</option>
          <option value="polyline">Linha</option>
        </select>
      </div>

      <div id='form-4th-row'>
        <input type="file">
      </div>

      <input type="hidden" name="geography" id='wkt-hidden-input'>

      <div>
        <button class="btn-ghost mt-5">
          <%= link_to 'Pesquisar', index_search_path  %>
        </button>
      </div>

    </form>
  </div>
</div>

  <script type="text/javascript">
    window.addEventListener("load", (event) => {
      document.getElementById('form-3th-row').hidden = true;
      document.getElementById('form-4th-row').hidden = true;
    });
    const formGeoInputOption = document.getElementById('geom-input-option');
    formGeoInputOption.addEventListener('input', (event) => {
      console.log("Geometry input option is set");
      const form3thRow = document.getElementById('form-3th-row');
      const form4thRow = document.getElementById('form-4th-row');
      if (formGeoInputOption.value == "draw") {
        form3thRow.hidden = false;
        form4thRow.hidden = true;
      } else if (formGeoInputOption.value == "upload") {
        form3thRow.hidden = true;
        form4thRow.hidden = false;
        drawControl.remove(map);
      } else {
        form3thRow.hidden = true;
        form4thRow.hidden = true;
        drawControl.remove(map);
      };
    });

    const formShapeOption = document.getElementById('shape-option');
    formShapeOption.addEventListener('input', (event) => {
      console.log("Geomerty type was selected");
      if (formShapeOption.value == "polygon") {
        drawControl._toolbars.draw.options.polyline = false;
        drawControl._toolbars.draw.options.polygon = true;
        map.addControl(drawControl);
      } else if (formShapeOption.value == "polyline") {
        drawControl._toolbars.draw.options.polyline = true;
        drawControl._toolbars.draw.options.polygon = false;
        map.addControl(drawControl);
      } else {
        drawControl._toolbars.draw.options.polyline = false;
        drawControl._toolbars.draw.options.polygon = false;
        drawControl.remove(map);
      };
    });

  </script>


  <script type="text/javascript">
    var map = L.map('map').setView([-15.5, -48], 5);
    L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
    attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
    maxZoom: 18,
    id: 'mapbox/streets-v11',
    tileSize: 512,
    zoomOffset: -1,
    accessToken: 'pk.eyJ1IjoibGVvZXhjZWxzdXMiLCJhIjoiY2tleWNxcnB2MGFzejJwcXQwdGIwMmR2byJ9.CbC1R_EI0AICNAxaZSvyeg'
    }).addTo(map);

    var drawnItems = new L.FeatureGroup();
    map.addLayer(drawnItems);
    var drawControl = new L.Control.Draw({
         edit: {
             featureGroup: drawnItems
         },
         draw: {
          marker: false,
          circle: false,
          circlemarker: false,
          rectangle: false,
          polygon: false,
          polyline: false
         }
     });

    // funcao para transformar uma leaflet layer em string no formato Well Known Text.
    // é preciso ter atenção ao nome da variável que contém L.map nessa funcao.
    function toWKT (layer) {
      var lng, lat, coords = [];
      if (layer instanceof L.Polygon || layer instanceof L.Polyline) {
        var latlngs = layer.getLatLngs();
        for (var i = 0; i < latlngs.length; i++) {
          var latlngs1 = latlngs[i];
          if (latlngs1.length){
            for (var j = 0; j < latlngs1.length; j++) {
              coords.push(latlngs1[j].lng + " " + latlngs1[j].lat);
              if (j === 0) {
              lng = latlngs1[j].lng;
              lat = latlngs1[j].lat;
              }
            }
          } else {
            coords.push(latlngs[i].lng + " " + latlngs[i].lat);
            if (i === 0) {
              lng = latlngs[i].lng;
              lat = latlngs[i].lat;
            }
          }
        };
        if (layer instanceof L.Polygon) {
          return "POLYGON((" + coords.join(",") + "," + lng + " " + lat + "))";
        } else if (layer instanceof L.Polyline) {
          return "LINESTRING(" + coords.join(",") + ")";
        }
      } else if (layer instanceof L.Marker) {
        return "POINT(" + layer.getLatLng().lng + " " + layer.getLatLng().lat + ")";
      }
    };

    //evento para aplicar a funcao toWKT à última layer editadas
    map.on('draw:edited', function (e) {
      e.layers.eachLayer(function(layer) {
          const wktContainer = document.getElementById('wkt-hidden-input');
          wktContainer.value = toWKT(layer);
          console.log(wktContainer.value);
        });
    });

    //evento para aplicar a funcao toWKT à última layer criada
    map.on('draw:created', function (e) {
      var layer = e.layer;
      drawnItems.addLayer(layer);
      const wktContainer = document.getElementById('wkt-hidden-input');
      wktContainer.value = toWKT(layer);
      console.log(wktContainer.value);
      });
  </script>
